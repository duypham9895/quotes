{"version":3,"sources":["components/quotes/QuoteItem.module.css","components/quotes/QuoteList.module.css","components/quotes/QuoteItem.js","components/quotes/QuoteList.js","pages/AllQuotes.js","components/quotes/NoQuotesFound.js","components/quotes/NoQuotesFound.module.css"],"names":["module","exports","QuoteItem","id","text","author","className","classes","item","to","QuoteList","quotes","navigate","useNavigate","location","useLocation","isSortedAscending","URLSearchParams","search","get","sortedParam","sortedQuotes","orderBy","sorting","onClick","pathname","list","map","AllQuotes","useHttp","getAllQuotes","sendRequest","data","status","isLoading","error","isSuccess","useEffect","LoadingSpinner","isEmpty","NoQuotesFound"],"mappings":"uHACAA,EAAOC,QAAU,CAAC,KAAO,wB,sBCAzBD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,QAAU,2B,gICmB5CC,EAhBG,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,GAAIC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,OAC7B,OACE,qBAAIC,UAAWC,IAAQC,KAAvB,UACE,mCACE,qCACE,4BAAIJ,MAEN,qCAAaC,OAEf,cAAC,IAAD,CAAMC,UAAU,MAAMG,GAAIN,EAA1B,+BAKL,E,kBCmBcO,EA9BG,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACbC,EAAWC,cACXC,EAAWC,cAGXC,EAAgD,QADlC,IAAIC,gBAAgBH,EAASI,QACXC,IAAI,QAEpCC,EAAcJ,EAAoB,MAAQ,OAC1CK,EAAeC,IAAQX,EAAQ,CAAC,cAAe,CAACS,IAMtD,OACE,eAAC,WAAD,WACE,qBAAKd,UAAWC,IAAQgB,QAAxB,SACE,yBAAQC,QAPe,WAC3BZ,EAAS,GAAD,OAAIE,EAASW,SAAb,iBAA8BT,EAAoB,OAAS,OACpE,EAKK,kBACQA,EAAoB,aAAe,iBAG7C,oBAAIV,UAAWC,IAAQmB,KAAvB,SACGL,EAAaM,KAAI,gBAAGxB,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,OAAb,OAChB,cAAC,EAAD,CAAoBF,GAAIA,EAAIE,OAAQA,EAAQD,KAAMA,GAAlCD,EADA,QAMzB,E,gCCGcyB,UA7BG,WAChB,MAKIC,YAAQC,KAAc,GAJxBC,EADF,EACEA,YACMpB,EAFR,EAEEqB,KACAC,EAHF,EAGEA,OAGIC,GANN,EAIEC,MAE2B,YAAXF,GACZG,EAAuB,cAAXH,EAMlB,OAJAI,qBAAU,WACRN,GACD,GAAE,CAACA,IAEAG,EACK,cAACI,EAAA,EAAD,CAAgBJ,UAAWA,IAOhCE,GAAaG,IAAQ5B,GAChB,cAAC6B,EAAA,EAAD,IAGF,cAAC,EAAD,CAAW7B,OAAQA,GAC3B,C,kCCpCD,oCAce6B,IAXO,WACpB,OACE,sBAAKlC,UAAWC,IAAQ,aAAxB,UACE,iDACA,cAAC,IAAD,CAAMD,UAAU,MAAMG,GAAG,aAAzB,2BAKL,C,qBCXDT,EAAOC,QAAU,CAAC,YAAY,iC","file":"static/js/4.dcbf36cf.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"QuoteItem_item__2dOvb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"QuoteList_list__3pzcl\",\"sorting\":\"QuoteList_sorting__rL6H1\"};","import { Link } from \"react-router-dom\";\n\nimport classes from \"./QuoteItem.module.css\";\n\nconst QuoteItem = ({ id, text, author }) => {\n  return (\n    <li className={classes.item}>\n      <figure>\n        <blockquote>\n          <p>{text}</p>\n        </blockquote>\n        <figcaption>{author}</figcaption>\n      </figure>\n      <Link className=\"btn\" to={id}>\n        View Fullscreen\n      </Link>\n    </li>\n  );\n};\n\nexport default QuoteItem;\n","import { Fragment } from \"react\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport orderBy from \"lodash/orderBy\";\n\nimport QuoteItem from \"./QuoteItem\";\nimport classes from \"./QuoteList.module.css\";\n\nconst QuoteList = ({ quotes }) => {\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  const queryParams = new URLSearchParams(location.search);\n  const isSortedAscending = queryParams.get(\"sort\") === \"asc\";\n\n  const sortedParam = isSortedAscending ? \"asc\" : \"desc\";\n  const sortedQuotes = orderBy(quotes, [\"created_at\"], [sortedParam]);\n\n  const changeSortingHandler = () => {\n    navigate(`${location.pathname}?sort=${isSortedAscending ? \"desc\" : \"asc\"}`);\n  };\n\n  return (\n    <Fragment>\n      <div className={classes.sorting}>\n        <button onClick={changeSortingHandler}>\n          Sort {isSortedAscending ? \"Descending\" : \"Ascending\"}\n        </button>\n      </div>\n      <ul className={classes.list}>\n        {sortedQuotes.map(({ id, text, author }) => (\n          <QuoteItem key={id} id={id} author={author} text={text} />\n        ))}\n      </ul>\n    </Fragment>\n  );\n};\n\nexport default QuoteList;\n","import { useEffect } from \"react\";\nimport isEmpty from \"lodash/isEmpty\";\n\nimport QuoteList from \"../components/quotes/QuoteList\";\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\nimport useHttp from \"../hooks/use-http\";\nimport { getAllQuotes } from \"../lib/api\";\nimport NoQuotesFound from \"../components/quotes/NoQuotesFound\";\n\nconst AllQuotes = () => {\n  const {\n    sendRequest,\n    data: quotes,\n    status,\n    error,\n  } = useHttp(getAllQuotes, true);\n  const isLoading = status === \"pending\";\n  const isSuccess = status === \"completed\";\n\n  useEffect(() => {\n    sendRequest();\n  }, [sendRequest]);\n\n  if (isLoading) {\n    return <LoadingSpinner isLoading={isLoading} />;\n  }\n\n  if (error) {\n    <p className=\"centered focused\">{error}</p>;\n  }\n\n  if (isSuccess && isEmpty(quotes)) {\n    return <NoQuotesFound />;\n  }\n\n  return <QuoteList quotes={quotes} />;\n};\n\nexport default AllQuotes;\n","import { Link } from \"react-router-dom\";\nimport classes from \"./NoQuotesFound.module.css\";\n\nconst NoQuotesFound = () => {\n  return (\n    <div className={classes[\"no-quotes\"]}>\n      <p>No quotes found!</p>\n      <Link className=\"btn\" to=\"/new-quote\">\n        Add a Quote\n      </Link>\n    </div>\n  );\n};\n\nexport default NoQuotesFound;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"no-quotes\":\"NoQuotesFound_no-quotes__22USv\"};"],"sourceRoot":""}